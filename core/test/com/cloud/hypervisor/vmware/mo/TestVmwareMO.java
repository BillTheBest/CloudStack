// Copyright 2012 Citrix Systems, Inc. Licensed under the
// Apache License, Version 2.0 (the "License"); you may not use this
// file except in compliance with the License.  Citrix Systems, Inc.
// reserves all rights not expressly granted by the License.
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Automatically generated by addcopyright.py at 04/03/2012
package com.cloud.hypervisor.vmware.mo;

import java.util.GregorianCalendar;

import org.apache.log4j.Logger;

import com.cloud.hypervisor.vmware.util.VmwareContext;
import com.cloud.serializer.GsonHelper;
import com.cloud.utils.testcase.Log4jEnabledTestCase;
import com.google.gson.Gson;
import com.vmware.vim25.DynamicProperty;
import com.vmware.vim25.ManagedObjectReference;
import com.vmware.vim25.ObjectContent;
import com.vmware.vim25.VirtualMachineConfigSpec;

public class TestVmwareMO extends Log4jEnabledTestCase {
    private static final Logger s_logger = Logger.getLogger(TestVmwareMO.class);

    public void test() {
		try {
			VmwareContext context = TestVmwareContextFactory.create(
					"10.223.80.29", "Administrator", "Suite219");
			
			HostMO hostMo = new HostMO(context, "HostSystem", "host-10");
			ObjectContent[] ocs = hostMo.getVmPropertiesOnHyperHost(new String[] {"name", "config.template", "runtime.bootTime"});
			if(ocs != null) {
			    for(ObjectContent oc : ocs) {
			        DynamicProperty[] props = oc.getPropSet();
			        if(props != null) {
			            String name = null;
			            boolean template = false;
			            GregorianCalendar bootTime = null;
			            
    			        for(DynamicProperty prop : props) {
    			            if(prop.getName().equals("name"))
    			                name = prop.getVal().toString();
    			            else if(prop.getName().equals("config.template"))
    			                template = (Boolean)prop.getVal();
    			            else if(prop.getName().equals("runtime.bootTime")) 
    			                bootTime = (GregorianCalendar)prop.getVal();
    			        }
    			        
                        System.out.println("name: " + name + ", template: " + template + ", bootTime: " + bootTime);
    			        
			        }
			        System.out.println("");
			    }
			}
			
			context.close();
		} catch(Exception e) {
			s_logger.error("Unexpected exception : ", e);
		}
    }
}

